"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const net = require("net");
const os = require("os");
const Debug = require("debug");
const debug = Debug('ionic:cli-framework:utils:network');
exports.ERROR_NETWORK_ADDRESS_NOT_AVAIL = 'NETWORK_ADDRESS_NOT_AVAIL';
function getExternalIPv4Interfaces() {
    const networkInterfaces = os.networkInterfaces();
    const devices = [];
    for (const device of Object.keys(networkInterfaces)) {
        const networkInterface = networkInterfaces[device];
        for (const networkAddress of networkInterface) {
            if (!networkAddress.internal && networkAddress.family === 'IPv4') {
                devices.push(Object.assign({ device }, networkAddress));
            }
        }
    }
    return devices;
}
exports.getExternalIPv4Interfaces = getExternalIPv4Interfaces;
function findClosestOpenPort(port, host) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        function t(portToCheck) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (yield isPortAvailable(portToCheck, host)) {
                    return portToCheck;
                }
                return t(portToCheck + 1);
            });
        }
        return t(port);
    });
}
exports.findClosestOpenPort = findClosestOpenPort;
function isPortAvailable(port, host) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            const tester = net.createServer()
                .once('error', (err) => {
                if (err.code === 'EADDRNOTAVAIL') {
                    reject(exports.ERROR_NETWORK_ADDRESS_NOT_AVAIL);
                }
                else if (err.code === 'EADDRINUSE') {
                    resolve(false); // host/port in use
                }
                else {
                    reject(err);
                }
            })
                .once('listening', () => {
                tester.once('close', () => {
                    resolve(true); // found available host/port
                })
                    .close();
            })
                .on('error', (err) => {
                reject(err);
            })
                .listen(port, host);
        });
    });
}
exports.isPortAvailable = isPortAvailable;
/**
 * Continuously attempt TCP connections.
 *
 * By default, this function will only ever resolve once a host is connectable.
 * This behavior can be changed with the `timeout` option, which resolves with
 * `false` if the timeout is reached.
 *
 * @param host The host to connect to.
 * @param port The port to connect to.
 * @param options.timeout Optionally define a timeout, in milliseconds.
 */
function isHostConnectable(host, port, { timeout } = {}) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tryConnect = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const sock = net.connect({ port, host });
                sock.on('connect', () => {
                    sock.destroy();
                    resolve(true);
                });
                sock.on('error', err => {
                    reject(err);
                });
            });
        });
        return new Promise((resolve) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            let timer;
            let resolved = false;
            if (timeout) {
                timer = setTimeout(() => {
                    debug('Timeout of %dms reached while waiting for host connectivity', timeout);
                    resolve(false);
                    resolved = true;
                }, timeout);
                timer.unref();
            }
            while (!resolved) {
                try {
                    yield tryConnect();
                    if (timer) {
                        clearTimeout(timer);
                    }
                    resolve(true);
                    resolved = true;
                }
                catch (e) {
                    // try again
                }
            }
        }));
    });
}
exports.isHostConnectable = isHostConnectable;
