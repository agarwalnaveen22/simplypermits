var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Attribute, ChangeDetectorRef, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Optional, Output, ViewContainerRef } from '@angular/core';
import { ActivatedRoute, ChildrenOutletContexts, PRIMARY_OUTLET, Router } from '@angular/router';
import { StackController } from './router-controller';
import { NavController } from '../../providers/nav-controller';
import { bindLifecycleEvents } from '../../providers/angular-delegate';
var IonRouterOutlet = /** @class */ (function () {
    function IonRouterOutlet(parentContexts, location, resolver, elementRef, name, stack, changeDetector, navCtrl, router) {
        this.parentContexts = parentContexts;
        this.location = location;
        this.resolver = resolver;
        this.elementRef = elementRef;
        this.changeDetector = changeDetector;
        this.navCtrl = navCtrl;
        this.activated = null;
        this._activatedRoute = null;
        this.activateEvents = new EventEmitter();
        this.deactivateEvents = new EventEmitter();
        this.name = name || PRIMARY_OUTLET;
        parentContexts.onChildOutletCreated(this.name, this);
        var hasStack = stack !== 'false' || stack !== false;
        this.stackCtrl = new StackController(hasStack, elementRef.nativeElement, router, this.navCtrl);
    }
    IonRouterOutlet.prototype.ngOnDestroy = function () {
        this.parentContexts.onChildOutletDestroyed(this.name);
    };
    IonRouterOutlet.prototype.ngOnInit = function () {
        if (!this.activated) {
            // If the outlet was not instantiated at the time the route got activated we need to populate
            // the outlet when it is initialized (ie inside a NgIf)
            var context = this.parentContexts.getContext(this.name);
            if (context && context.route) {
                if (context.attachRef) {
                    // `attachRef` is populated when there is an existing component to mount
                    this.attach(context.attachRef, context.route);
                }
                else {
                    // otherwise the component defined in the configuration is created
                    this.activateWith(context.route, context.resolver || null);
                }
            }
        }
    };
    Object.defineProperty(IonRouterOutlet.prototype, "isActivated", {
        get: function () { return !!this.activated; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IonRouterOutlet.prototype, "component", {
        get: function () {
            if (!this.activated) {
                throw new Error('Outlet is not activated');
            }
            return this.activated.instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IonRouterOutlet.prototype, "activatedRoute", {
        get: function () {
            if (!this.activated) {
                throw new Error('Outlet is not activated');
            }
            return this._activatedRoute;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IonRouterOutlet.prototype, "activatedRouteData", {
        get: function () {
            if (this._activatedRoute) {
                return this._activatedRoute.snapshot.data;
            }
            return {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     */
    IonRouterOutlet.prototype.detach = function () {
        if (!this.activated) {
            throw new Error('Outlet is not activated');
        }
        this.location.detach();
        var cmp = this.activated;
        this.activated = null;
        this._activatedRoute = null;
        return cmp;
    };
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     */
    IonRouterOutlet.prototype.attach = function (ref, activatedRoute) {
        this.activated = ref;
        this._activatedRoute = activatedRoute;
        this.location.insert(ref.hostView);
    };
    IonRouterOutlet.prototype.deactivate = function () {
        if (this.activated) {
            var c = this.component;
            this.activated = null;
            this._activatedRoute = null;
            this.deactivateEvents.emit(c);
        }
    };
    IonRouterOutlet.prototype.activateWith = function (activatedRoute, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var enteringView, snapshot, component, factory, childContexts, injector, cmp, _a, direction, animated;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.isActivated) {
                            throw new Error('Cannot activate an already activated outlet');
                        }
                        this._activatedRoute = activatedRoute;
                        enteringView = this.stackCtrl.getExistingView(activatedRoute);
                        if (enteringView) {
                            this.activated = enteringView.ref;
                        }
                        else {
                            snapshot = activatedRoute._futureSnapshot;
                            component = snapshot.routeConfig.component;
                            resolver = resolver || this.resolver;
                            factory = resolver.resolveComponentFactory(component);
                            childContexts = this.parentContexts.getOrCreateContext(this.name).children;
                            injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);
                            cmp = this.activated = this.location.createComponent(factory, this.location.length, injector);
                            bindLifecycleEvents(cmp.instance, cmp.location.nativeElement);
                            // Calling `markForCheck` to make sure we will run the change detection when the
                            // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.
                            this.changeDetector.markForCheck();
                            enteringView = this.stackCtrl.createView(this.activated, activatedRoute);
                        }
                        _a = this.navCtrl.consumeTransition(), direction = _a.direction, animated = _a.animated;
                        return [4 /*yield*/, this.stackCtrl.setActive(enteringView, direction, animated)];
                    case 1:
                        _b.sent();
                        this.activateEvents.emit(this.activated.instance);
                        emitEvent(this.elementRef.nativeElement);
                        return [2 /*return*/];
                }
            });
        });
    };
    IonRouterOutlet.prototype.canGoBack = function (deep) {
        if (deep === void 0) { deep = 1; }
        return this.stackCtrl.canGoBack(deep);
    };
    IonRouterOutlet.prototype.pop = function (deep) {
        if (deep === void 0) { deep = 1; }
        return this.stackCtrl.pop(deep);
    };
    IonRouterOutlet.decorators = [
        { type: Directive, args: [{
                    selector: 'ion-router-outlet',
                    exportAs: 'outlet'
                },] },
    ];
    /** @nocollapse */
    IonRouterOutlet.ctorParameters = function () { return [
        { type: ChildrenOutletContexts },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: String, decorators: [{ type: Attribute, args: ['name',] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Attribute, args: ['stack',] }] },
        { type: ChangeDetectorRef },
        { type: NavController },
        { type: Router }
    ]; };
    IonRouterOutlet.propDecorators = {
        activateEvents: [{ type: Output, args: ['activate',] }],
        deactivateEvents: [{ type: Output, args: ['deactivate',] }]
    };
    return IonRouterOutlet;
}());
export { IonRouterOutlet };
function emitEvent(el) {
    var event = new CustomEvent('ionRouterOutletActivated', {
        bubbles: true,
        cancelable: true,
    });
    el.dispatchEvent(event);
}
var OutletInjector = /** @class */ (function () {
    function OutletInjector(route, childContexts, parent) {
        this.route = route;
        this.childContexts = childContexts;
        this.parent = parent;
    }
    OutletInjector.prototype.get = function (token, notFoundValue) {
        if (token === ActivatedRoute) {
            return this.route;
        }
        if (token === ChildrenOutletContexts) {
            return this.childContexts;
        }
        return this.parent.get(token, notFoundValue);
    };
    return OutletInjector;
}());
