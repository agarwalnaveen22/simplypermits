import { ElementRef, EventEmitter } from '@angular/core';
export declare function proxyInputs(instance: any, el: ElementRef, props: string[]): void;
export declare function proxyOutputs(instance: any, events: string[]): void;
export declare function proxyMethods(instance: any, ref: ElementRef, methods: string[]): void;
export interface App extends StencilComponents.IonApp {
}
export declare class App {
}
export interface Avatar extends StencilComponents.IonAvatar {
}
export declare class Avatar {
}
export interface BackButton extends StencilComponents.IonBackButton {
}
export declare class BackButton {
    constructor(r: ElementRef);
}
export interface Badge extends StencilComponents.IonBadge {
}
export declare class Badge {
    constructor(r: ElementRef);
}
export interface Button extends StencilComponents.IonButton {
}
export declare class Button {
    ionFocus: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Buttons extends StencilComponents.IonButtons {
}
export declare class Buttons {
}
export interface Card extends StencilComponents.IonCard {
}
export declare class Card {
    constructor(r: ElementRef);
}
export interface CardContent extends StencilComponents.IonCardContent {
}
export declare class CardContent {
    constructor(r: ElementRef);
}
export interface CardHeader extends StencilComponents.IonCardHeader {
}
export declare class CardHeader {
    constructor(r: ElementRef);
}
export interface CardSubtitle extends StencilComponents.IonCardSubtitle {
}
export declare class CardSubtitle {
    constructor(r: ElementRef);
}
export interface CardTitle extends StencilComponents.IonCardTitle {
}
export declare class CardTitle {
    constructor(r: ElementRef);
}
export interface Checkbox extends StencilComponents.IonCheckbox {
}
export declare class Checkbox {
    ionChange: EventEmitter<any>;
    ionFocus: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    ionStyle: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Chip extends StencilComponents.IonChip {
}
export declare class Chip {
    constructor(r: ElementRef);
}
export interface ChipButton extends StencilComponents.IonChipButton {
}
export declare class ChipButton {
    constructor(r: ElementRef);
}
export interface ChipIcon extends StencilComponents.IonChipIcon {
}
export declare class ChipIcon {
    constructor(r: ElementRef);
}
export interface Col extends StencilComponents.IonCol {
}
export declare class Col {
    constructor(r: ElementRef);
}
export interface Content extends StencilComponents.IonContent {
}
export declare class Content {
    constructor(r: ElementRef);
}
export interface Datetime extends StencilComponents.IonDatetime {
}
export declare class Datetime {
    ionCancel: EventEmitter<any>;
    ionStyle: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Fab extends StencilComponents.IonFab {
}
export declare class Fab {
    constructor(r: ElementRef);
}
export interface FabButton extends StencilComponents.IonFabButton {
}
export declare class FabButton {
    constructor(r: ElementRef);
}
export interface FabList extends StencilComponents.IonFabList {
}
export declare class FabList {
    constructor(r: ElementRef);
}
export interface Footer extends StencilComponents.IonFooter {
}
export declare class Footer {
    constructor(r: ElementRef);
}
export interface Grid extends StencilComponents.IonGrid {
}
export declare class Grid {
    constructor(r: ElementRef);
}
export interface Header extends StencilComponents.IonHeader {
}
export declare class Header {
    constructor(r: ElementRef);
}
export interface HideWhen extends StencilComponents.IonHideWhen {
}
export declare class HideWhen {
    constructor(r: ElementRef);
}
export interface Icon extends StencilComponents.IonIcon {
}
export declare class Icon {
    constructor(r: ElementRef);
}
export interface Img extends StencilComponents.IonImg {
}
export declare class Img {
    ionImgDidLoad: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface InfiniteScroll extends StencilComponents.IonInfiniteScroll {
}
export declare class InfiniteScroll {
    ionInfinite: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface InfiniteScrollContent extends StencilComponents.IonInfiniteScrollContent {
}
export declare class InfiniteScrollContent {
    constructor(r: ElementRef);
}
export interface Input extends StencilComponents.IonInput {
}
export declare class Input {
    ionInput: EventEmitter<any>;
    ionChange: EventEmitter<any>;
    ionStyle: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    ionFocus: EventEmitter<any>;
    ionInputDidLoad: EventEmitter<any>;
    ionInputDidUnload: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Item extends StencilComponents.IonItem {
}
export declare class Item {
    constructor(r: ElementRef);
}
export interface ItemDivider extends StencilComponents.IonItemDivider {
}
export declare class ItemDivider {
    constructor(r: ElementRef);
}
export interface ItemGroup extends StencilComponents.IonItemGroup {
}
export declare class ItemGroup {
}
export interface ItemOption extends StencilComponents.IonItemOption {
}
export declare class ItemOption {
    constructor(r: ElementRef);
}
export interface ItemOptions extends StencilComponents.IonItemOptions {
}
export declare class ItemOptions {
    ionSwipe: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface ItemSliding extends StencilComponents.IonItemSliding {
}
export declare class ItemSliding {
    ionDrag: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Label extends StencilComponents.IonLabel {
}
export declare class Label {
    ionStyle: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface List extends StencilComponents.IonList {
}
export declare class List {
    constructor(r: ElementRef);
}
export interface ListHeader extends StencilComponents.IonListHeader {
}
export declare class ListHeader {
    constructor(r: ElementRef);
}
export interface Menu extends StencilComponents.IonMenu {
}
export declare class Menu {
    ionOpen: EventEmitter<any>;
    ionClose: EventEmitter<any>;
    ionMenuChange: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface MenuButton extends StencilComponents.IonMenuButton {
}
export declare class MenuButton {
    constructor(r: ElementRef);
}
export interface MenuToggle extends StencilComponents.IonMenuToggle {
}
export declare class MenuToggle {
    constructor(r: ElementRef);
}
export interface Nav extends StencilComponents.IonNav {
}
export declare class Nav {
    ionNavWillLoad: EventEmitter<any>;
    ionNavWillChange: EventEmitter<any>;
    ionNavDidChange: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface NavPop extends StencilComponents.IonNavPop {
}
export declare class NavPop {
}
export interface NavPush extends StencilComponents.IonNavPush {
}
export declare class NavPush {
    constructor(r: ElementRef);
}
export interface NavSetRoot extends StencilComponents.IonNavSetRoot {
}
export declare class NavSetRoot {
    constructor(r: ElementRef);
}
export interface Note extends StencilComponents.IonNote {
}
export declare class Note {
    constructor(r: ElementRef);
}
export interface Radio extends StencilComponents.IonRadio {
}
export declare class Radio {
    ionRadioDidLoad: EventEmitter<any>;
    ionRadioDidUnload: EventEmitter<any>;
    ionStyle: EventEmitter<any>;
    ionSelect: EventEmitter<any>;
    ionFocus: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface RadioGroup extends StencilComponents.IonRadioGroup {
}
export declare class RadioGroup {
    ionChange: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Range extends StencilComponents.IonRange {
}
export declare class Range {
    ionChange: EventEmitter<any>;
    ionStyle: EventEmitter<any>;
    ionFocus: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Refresher extends StencilComponents.IonRefresher {
}
export declare class Refresher {
    ionRefresh: EventEmitter<any>;
    ionPull: EventEmitter<any>;
    ionStart: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface RefresherContent extends StencilComponents.IonRefresherContent {
}
export declare class RefresherContent {
    constructor(r: ElementRef);
}
export interface Reorder extends StencilComponents.IonReorder {
}
export declare class Reorder {
}
export interface ReorderGroup extends StencilComponents.IonReorderGroup {
}
export declare class ReorderGroup {
    constructor(r: ElementRef);
}
export interface RippleEffect extends StencilComponents.IonRippleEffect {
}
export declare class RippleEffect {
    constructor(r: ElementRef);
}
export interface Row extends StencilComponents.IonRow {
}
export declare class Row {
}
export interface Scroll extends StencilComponents.IonScroll {
}
export declare class Scroll {
    ionScrollStart: EventEmitter<any>;
    ionScroll: EventEmitter<any>;
    ionScrollEnd: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Searchbar extends StencilComponents.IonSearchbar {
}
export declare class Searchbar {
    ionInput: EventEmitter<any>;
    ionChange: EventEmitter<any>;
    ionCancel: EventEmitter<any>;
    ionClear: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    ionFocus: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Segment extends StencilComponents.IonSegment {
}
export declare class Segment {
    ionChange: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface SegmentButton extends StencilComponents.IonSegmentButton {
}
export declare class SegmentButton {
    ionSelect: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Select extends StencilComponents.IonSelect {
}
export declare class Select {
    ionChange: EventEmitter<any>;
    ionCancel: EventEmitter<any>;
    ionFocus: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    ionStyle: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface SelectOption extends StencilComponents.IonSelectOption {
}
export declare class SelectOption {
    ionSelectOptionDidLoad: EventEmitter<any>;
    ionSelectOptionDidUnload: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface SelectPopover extends StencilComponents.IonSelectPopover {
}
export declare class SelectPopover {
    constructor(r: ElementRef);
}
export interface ShowWhen extends StencilComponents.IonShowWhen {
}
export declare class ShowWhen {
    constructor(r: ElementRef);
}
export interface SkeletonText extends StencilComponents.IonSkeletonText {
}
export declare class SkeletonText {
    constructor(r: ElementRef);
}
export interface Slide extends StencilComponents.IonSlide {
}
export declare class Slide {
}
export interface Slides extends StencilComponents.IonSlides {
}
export declare class Slides {
    ionSlideWillChange: EventEmitter<any>;
    ionSlideDidChange: EventEmitter<any>;
    ionSlideNextStart: EventEmitter<any>;
    ionSlidePrevStart: EventEmitter<any>;
    ionSlideNextEnd: EventEmitter<any>;
    ionSlidePrevEnd: EventEmitter<any>;
    ionSlideTransitionStart: EventEmitter<any>;
    ionSlideTransitionEnd: EventEmitter<any>;
    ionSlideDrag: EventEmitter<any>;
    ionSlideReachStart: EventEmitter<any>;
    ionSlideReachEnd: EventEmitter<any>;
    ionSlideTouchStart: EventEmitter<any>;
    ionSlideTouchEnd: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Spinner extends StencilComponents.IonSpinner {
}
export declare class Spinner {
    constructor(r: ElementRef);
}
export interface SplitPane extends StencilComponents.IonSplitPane {
}
export declare class SplitPane {
    ionChange: EventEmitter<any>;
    ionSplitPaneVisible: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Tab extends StencilComponents.IonTab {
}
export declare class Tab {
    ionSelect: EventEmitter<any>;
    ionTabMutated: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Tabs extends StencilComponents.IonTabs {
}
export declare class Tabs {
    ionChange: EventEmitter<any>;
    ionNavWillLoad: EventEmitter<any>;
    ionNavWillChange: EventEmitter<any>;
    ionNavDidChange: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Text extends StencilComponents.IonText {
}
export declare class Text {
    constructor(r: ElementRef);
}
export interface Textarea extends StencilComponents.IonTextarea {
}
export declare class Textarea {
    ionChange: EventEmitter<any>;
    ionInput: EventEmitter<any>;
    ionStyle: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    ionFocus: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Thumbnail extends StencilComponents.IonThumbnail {
}
export declare class Thumbnail {
}
export interface Toggle extends StencilComponents.IonToggle {
}
export declare class Toggle {
    ionChange: EventEmitter<any>;
    ionFocus: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    ionStyle: EventEmitter<any>;
    constructor(r: ElementRef);
}
export interface Toolbar extends StencilComponents.IonToolbar {
}
export declare class Toolbar {
    constructor(r: ElementRef);
}
export interface ToolbarTitle extends StencilComponents.IonTitle {
}
export declare class ToolbarTitle {
    constructor(r: ElementRef);
}
