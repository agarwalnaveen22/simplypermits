var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var ImageResizer = /** @class */ (function (_super) {
    __extends(ImageResizer, _super);
    function ImageResizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageResizer.prototype.resize = function (options) { return cordova(this, "resize", {}, arguments); };
    ImageResizer.pluginName = "ImageResizer";
    ImageResizer.plugin = "info.protonet.imageresizer";
    ImageResizer.pluginRef = "ImageResizer";
    ImageResizer.repo = "https://github.com/JoschkaSchulz/cordova-plugin-image-resizer";
    ImageResizer.platforms = ["Android", "iOS", "Windows"];
    ImageResizer = __decorate([
        Injectable()
    ], ImageResizer);
    return ImageResizer;
}(IonicNativePlugin));
export { ImageResizer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ltYWdlLXJlc2l6ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBaUZ0QyxnQ0FBaUI7Ozs7SUFLakQsNkJBQU0sYUFBQyxPQUE0Qjs7Ozs7O0lBTHhCLFlBQVk7UUFEeEIsVUFBVSxFQUFFO09BQ0EsWUFBWTt1QkFsRnpCO0VBa0ZrQyxpQkFBaUI7U0FBdEMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlUmVzaXplck9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIFVSSSBmb3IgdGhlIGltYWdlIG9uIHRoZSBkZXZpY2UgdG8gZ2V0IHNjYWxlZFxuICAgKi9cbiAgdXJpOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmb2xkZXIgdGhlIGltYWdlIHNob3VsZCBiZSBwdXRcbiAgICogKEFuZHJvaWQgb25seSlcbiAgICovXG4gIGZvbGRlck5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgY3VzdG9tIG5hbWUgZm9yIHRoZSBmaWxlLiBEZWZhdWx0IG5hbWUgaXMgYSB0aW1lc3RhbXAuIFlvdSBoYXZlIHRvIHNldCB0aGlzIHZhbHVlIG9uIGlPU1xuICAgKi9cbiAgZmlsZU5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqXG4gICAqIFF1YWxpdHkgZ2l2ZW4gYXMgTnVtYmVyIGZvciB0aGUgcXVhbGl0eSBvZiB0aGUgbmV3IGltYWdlXG4gICAqIChBbmRyb2lkIGFuZCBpT1Mgb25seSlcbiAgICovXG4gIHF1YWxpdHk/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgbmV3IGltYWdlXG4gICAqL1xuICB3aWR0aDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBuZXcgaW1hZ2VcbiAgICovXG4gIGhlaWdodDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0byByZXR1cm4gYSBiYXNlNjQgZW5jb2RlZCBpbWFnZSBzdHJpbmcgaW5zdGVhZCBvZiB0aGUgcGF0aCB0byB0aGUgcmVzaXplZCBpbWFnZS5cbiAgICogaU9TIG9ubHlcbiAgICovXG4gIGJhc2U2ND86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQG5hbWUgSW1hZ2UgUmVzaXplclxuICogQGRlc2NyaXB0aW9uXG4gKiBDb3Jkb3ZhIFBsdWdpbiBGb3IgSW1hZ2UgUmVzaXplXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBJbWFnZVJlc2l6ZXIsIEltYWdlUmVzaXplck9wdGlvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ltYWdlLXJlc2l6ZXInO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaW1hZ2VSZXNpemVyOiBJbWFnZVJlc2l6ZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIGxldCBvcHRpb25zID0ge1xuICogIHVyaTogdXJpLFxuICogIGZvbGRlck5hbWU6ICdQcm90b25ldCcsXG4gKiAgcXVhbGl0eTogOTAsXG4gKiAgd2lkdGg6IDEyODAsXG4gKiAgaGVpZ2h0OiAxMjgwXG4gKiB9IGFzIEltYWdlUmVzaXplck9wdGlvbnM7XG4gKlxuICogdGhpcy5pbWFnZVJlc2l6ZXJcbiAqICAgLnJlc2l6ZShvcHRpb25zKVxuICogICAudGhlbigoZmlsZVBhdGg6IHN0cmluZykgPT4gY29uc29sZS5sb2coJ0ZpbGVQYXRoJywgZmlsZVBhdGgpKVxuICogICAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZyhlKSk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogSW1hZ2VSZXNpemVyT3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0ltYWdlUmVzaXplcicsXG4gIHBsdWdpbjogJ2luZm8ucHJvdG9uZXQuaW1hZ2VyZXNpemVyJyxcbiAgcGx1Z2luUmVmOiAnSW1hZ2VSZXNpemVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9Kb3NjaGthU2NodWx6L2NvcmRvdmEtcGx1Z2luLWltYWdlLXJlc2l6ZXInLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEltYWdlUmVzaXplciBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlc2l6ZShvcHRpb25zOiBJbWFnZVJlc2l6ZXJPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==